/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FormDataService } from "../formData.service";
import { FormDataCreateInput } from "./FormDataCreateInput";
import { FormData } from "./FormData";
import { FormDataFindManyArgs } from "./FormDataFindManyArgs";
import { FormDataWhereUniqueInput } from "./FormDataWhereUniqueInput";
import { FormDataUpdateInput } from "./FormDataUpdateInput";

export class FormDataControllerBase {
  constructor(protected readonly service: FormDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FormData })
  async createFormData(
    @common.Body() data: FormDataCreateInput
  ): Promise<FormData> {
    return await this.service.createFormData({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fromField: true,
        to: true,
        date: true,
        weight: true,
        price: true,
        contact: true,
        messages: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FormData] })
  @ApiNestedQuery(FormDataFindManyArgs)
  async formDataItems(@common.Req() request: Request): Promise<FormData[]> {
    const args = plainToClass(FormDataFindManyArgs, request.query);
    return this.service.formDataItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fromField: true,
        to: true,
        date: true,
        weight: true,
        price: true,
        contact: true,
        messages: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FormData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async formData(
    @common.Param() params: FormDataWhereUniqueInput
  ): Promise<FormData | null> {
    const result = await this.service.formData({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fromField: true,
        to: true,
        date: true,
        weight: true,
        price: true,
        contact: true,
        messages: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FormData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFormData(
    @common.Param() params: FormDataWhereUniqueInput,
    @common.Body() data: FormDataUpdateInput
  ): Promise<FormData | null> {
    try {
      return await this.service.updateFormData({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fromField: true,
          to: true,
          date: true,
          weight: true,
          price: true,
          contact: true,
          messages: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FormData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFormData(
    @common.Param() params: FormDataWhereUniqueInput
  ): Promise<FormData | null> {
    try {
      return await this.service.deleteFormData({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          fromField: true,
          to: true,
          date: true,
          weight: true,
          price: true,
          contact: true,
          messages: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
