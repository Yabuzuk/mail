/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FormData } from "./FormData";
import { FormDataCountArgs } from "./FormDataCountArgs";
import { FormDataFindManyArgs } from "./FormDataFindManyArgs";
import { FormDataFindUniqueArgs } from "./FormDataFindUniqueArgs";
import { CreateFormDataArgs } from "./CreateFormDataArgs";
import { UpdateFormDataArgs } from "./UpdateFormDataArgs";
import { DeleteFormDataArgs } from "./DeleteFormDataArgs";
import { FormDataService } from "../formData.service";
@graphql.Resolver(() => FormData)
export class FormDataResolverBase {
  constructor(protected readonly service: FormDataService) {}

  async _formDataItemsMeta(
    @graphql.Args() args: FormDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FormData])
  async formDataItems(
    @graphql.Args() args: FormDataFindManyArgs
  ): Promise<FormData[]> {
    return this.service.formDataItems(args);
  }

  @graphql.Query(() => FormData, { nullable: true })
  async formData(
    @graphql.Args() args: FormDataFindUniqueArgs
  ): Promise<FormData | null> {
    const result = await this.service.formData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FormData)
  async createFormData(
    @graphql.Args() args: CreateFormDataArgs
  ): Promise<FormData> {
    return await this.service.createFormData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FormData)
  async updateFormData(
    @graphql.Args() args: UpdateFormDataArgs
  ): Promise<FormData | null> {
    try {
      return await this.service.updateFormData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FormData)
  async deleteFormData(
    @graphql.Args() args: DeleteFormDataArgs
  ): Promise<FormData | null> {
    try {
      return await this.service.deleteFormData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
