/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FormData as PrismaFormData } from "@prisma/client";

export class FormDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FormDataCountArgs, "select">): Promise<number> {
    return this.prisma.formData.count(args);
  }

  async formDataItems(
    args: Prisma.FormDataFindManyArgs
  ): Promise<PrismaFormData[]> {
    return this.prisma.formData.findMany(args);
  }
  async formData(
    args: Prisma.FormDataFindUniqueArgs
  ): Promise<PrismaFormData | null> {
    return this.prisma.formData.findUnique(args);
  }
  async createFormData(
    args: Prisma.FormDataCreateArgs
  ): Promise<PrismaFormData> {
    return this.prisma.formData.create(args);
  }
  async updateFormData(
    args: Prisma.FormDataUpdateArgs
  ): Promise<PrismaFormData> {
    return this.prisma.formData.update(args);
  }
  async deleteFormData(
    args: Prisma.FormDataDeleteArgs
  ): Promise<PrismaFormData> {
    return this.prisma.formData.delete(args);
  }
}
