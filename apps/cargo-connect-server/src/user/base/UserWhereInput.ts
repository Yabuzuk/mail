/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { ApplicationListRelationFilter } from "../../application/base/ApplicationListRelationFilter";
import { TokenWalletListRelationFilter } from "../../tokenWallet/base/TokenWalletListRelationFilter";
import { RatingListRelationFilter } from "../../rating/base/RatingListRelationFilter";
import { FeedbackListRelationFilter } from "../../feedback/base/FeedbackListRelationFilter";
import { AffiliateListRelationFilter } from "../../affiliate/base/AffiliateListRelationFilter";

@InputType()
class UserWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  firstName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  lastName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  username?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  email?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  fullName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phoneNumber?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  socialMediaLinks?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ApplicationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ApplicationListRelationFilter)
  @IsOptional()
  @Field(() => ApplicationListRelationFilter, {
    nullable: true,
  })
  applications?: ApplicationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TokenWalletListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TokenWalletListRelationFilter)
  @IsOptional()
  @Field(() => TokenWalletListRelationFilter, {
    nullable: true,
  })
  tokenWallets?: TokenWalletListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => RatingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RatingListRelationFilter)
  @IsOptional()
  @Field(() => RatingListRelationFilter, {
    nullable: true,
  })
  ratings?: RatingListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FeedbackListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FeedbackListRelationFilter)
  @IsOptional()
  @Field(() => FeedbackListRelationFilter, {
    nullable: true,
  })
  feedbacks?: FeedbackListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AffiliateListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AffiliateListRelationFilter)
  @IsOptional()
  @Field(() => AffiliateListRelationFilter, {
    nullable: true,
  })
  affiliates?: AffiliateListRelationFilter;
}

export { UserWhereInput as UserWhereInput };
