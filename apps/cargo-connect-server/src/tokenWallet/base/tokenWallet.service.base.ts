/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TokenWallet as PrismaTokenWallet,
  User as PrismaUser,
} from "@prisma/client";

export class TokenWalletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TokenWalletCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tokenWallet.count(args);
  }

  async tokenWallets(
    args: Prisma.TokenWalletFindManyArgs
  ): Promise<PrismaTokenWallet[]> {
    return this.prisma.tokenWallet.findMany(args);
  }
  async tokenWallet(
    args: Prisma.TokenWalletFindUniqueArgs
  ): Promise<PrismaTokenWallet | null> {
    return this.prisma.tokenWallet.findUnique(args);
  }
  async createTokenWallet(
    args: Prisma.TokenWalletCreateArgs
  ): Promise<PrismaTokenWallet> {
    return this.prisma.tokenWallet.create(args);
  }
  async updateTokenWallet(
    args: Prisma.TokenWalletUpdateArgs
  ): Promise<PrismaTokenWallet> {
    return this.prisma.tokenWallet.update(args);
  }
  async deleteTokenWallet(
    args: Prisma.TokenWalletDeleteArgs
  ): Promise<PrismaTokenWallet> {
    return this.prisma.tokenWallet.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.tokenWallet
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
