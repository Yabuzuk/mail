/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TokenWalletService } from "../tokenWallet.service";
import { TokenWalletCreateInput } from "./TokenWalletCreateInput";
import { TokenWallet } from "./TokenWallet";
import { TokenWalletFindManyArgs } from "./TokenWalletFindManyArgs";
import { TokenWalletWhereUniqueInput } from "./TokenWalletWhereUniqueInput";
import { TokenWalletUpdateInput } from "./TokenWalletUpdateInput";

export class TokenWalletControllerBase {
  constructor(protected readonly service: TokenWalletService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TokenWallet })
  async createTokenWallet(
    @common.Body() data: TokenWalletCreateInput
  ): Promise<TokenWallet> {
    return await this.service.createTokenWallet({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tokenBalance: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TokenWallet] })
  @ApiNestedQuery(TokenWalletFindManyArgs)
  async tokenWallets(@common.Req() request: Request): Promise<TokenWallet[]> {
    const args = plainToClass(TokenWalletFindManyArgs, request.query);
    return this.service.tokenWallets({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tokenBalance: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TokenWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tokenWallet(
    @common.Param() params: TokenWalletWhereUniqueInput
  ): Promise<TokenWallet | null> {
    const result = await this.service.tokenWallet({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        tokenBalance: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TokenWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTokenWallet(
    @common.Param() params: TokenWalletWhereUniqueInput,
    @common.Body() data: TokenWalletUpdateInput
  ): Promise<TokenWallet | null> {
    try {
      return await this.service.updateTokenWallet({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tokenBalance: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TokenWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTokenWallet(
    @common.Param() params: TokenWalletWhereUniqueInput
  ): Promise<TokenWallet | null> {
    try {
      return await this.service.deleteTokenWallet({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          tokenBalance: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
