/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TokenWallet } from "./TokenWallet";
import { TokenWalletCountArgs } from "./TokenWalletCountArgs";
import { TokenWalletFindManyArgs } from "./TokenWalletFindManyArgs";
import { TokenWalletFindUniqueArgs } from "./TokenWalletFindUniqueArgs";
import { CreateTokenWalletArgs } from "./CreateTokenWalletArgs";
import { UpdateTokenWalletArgs } from "./UpdateTokenWalletArgs";
import { DeleteTokenWalletArgs } from "./DeleteTokenWalletArgs";
import { User } from "../../user/base/User";
import { TokenWalletService } from "../tokenWallet.service";
@graphql.Resolver(() => TokenWallet)
export class TokenWalletResolverBase {
  constructor(protected readonly service: TokenWalletService) {}

  async _tokenWalletsMeta(
    @graphql.Args() args: TokenWalletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TokenWallet])
  async tokenWallets(
    @graphql.Args() args: TokenWalletFindManyArgs
  ): Promise<TokenWallet[]> {
    return this.service.tokenWallets(args);
  }

  @graphql.Query(() => TokenWallet, { nullable: true })
  async tokenWallet(
    @graphql.Args() args: TokenWalletFindUniqueArgs
  ): Promise<TokenWallet | null> {
    const result = await this.service.tokenWallet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TokenWallet)
  async createTokenWallet(
    @graphql.Args() args: CreateTokenWalletArgs
  ): Promise<TokenWallet> {
    return await this.service.createTokenWallet({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TokenWallet)
  async updateTokenWallet(
    @graphql.Args() args: UpdateTokenWalletArgs
  ): Promise<TokenWallet | null> {
    try {
      return await this.service.updateTokenWallet({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TokenWallet)
  async deleteTokenWallet(
    @graphql.Args() args: DeleteTokenWalletArgs
  ): Promise<TokenWallet | null> {
    try {
      return await this.service.deleteTokenWallet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: TokenWallet): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
