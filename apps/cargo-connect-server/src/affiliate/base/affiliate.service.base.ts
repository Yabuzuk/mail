/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Affiliate as PrismaAffiliate,
  User as PrismaUser,
} from "@prisma/client";

export class AffiliateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AffiliateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.affiliate.count(args);
  }

  async affiliates(
    args: Prisma.AffiliateFindManyArgs
  ): Promise<PrismaAffiliate[]> {
    return this.prisma.affiliate.findMany(args);
  }
  async affiliate(
    args: Prisma.AffiliateFindUniqueArgs
  ): Promise<PrismaAffiliate | null> {
    return this.prisma.affiliate.findUnique(args);
  }
  async createAffiliate(
    args: Prisma.AffiliateCreateArgs
  ): Promise<PrismaAffiliate> {
    return this.prisma.affiliate.create(args);
  }
  async updateAffiliate(
    args: Prisma.AffiliateUpdateArgs
  ): Promise<PrismaAffiliate> {
    return this.prisma.affiliate.update(args);
  }
  async deleteAffiliate(
    args: Prisma.AffiliateDeleteArgs
  ): Promise<PrismaAffiliate> {
    return this.prisma.affiliate.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.affiliate
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
