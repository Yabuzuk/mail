/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Affiliate } from "./Affiliate";
import { AffiliateCountArgs } from "./AffiliateCountArgs";
import { AffiliateFindManyArgs } from "./AffiliateFindManyArgs";
import { AffiliateFindUniqueArgs } from "./AffiliateFindUniqueArgs";
import { CreateAffiliateArgs } from "./CreateAffiliateArgs";
import { UpdateAffiliateArgs } from "./UpdateAffiliateArgs";
import { DeleteAffiliateArgs } from "./DeleteAffiliateArgs";
import { User } from "../../user/base/User";
import { AffiliateService } from "../affiliate.service";
@graphql.Resolver(() => Affiliate)
export class AffiliateResolverBase {
  constructor(protected readonly service: AffiliateService) {}

  async _affiliatesMeta(
    @graphql.Args() args: AffiliateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Affiliate])
  async affiliates(
    @graphql.Args() args: AffiliateFindManyArgs
  ): Promise<Affiliate[]> {
    return this.service.affiliates(args);
  }

  @graphql.Query(() => Affiliate, { nullable: true })
  async affiliate(
    @graphql.Args() args: AffiliateFindUniqueArgs
  ): Promise<Affiliate | null> {
    const result = await this.service.affiliate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Affiliate)
  async createAffiliate(
    @graphql.Args() args: CreateAffiliateArgs
  ): Promise<Affiliate> {
    return await this.service.createAffiliate({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Affiliate)
  async updateAffiliate(
    @graphql.Args() args: UpdateAffiliateArgs
  ): Promise<Affiliate | null> {
    try {
      return await this.service.updateAffiliate({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Affiliate)
  async deleteAffiliate(
    @graphql.Args() args: DeleteAffiliateArgs
  ): Promise<Affiliate | null> {
    try {
      return await this.service.deleteAffiliate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Affiliate): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
